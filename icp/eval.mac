;**********************************************************************;
;                                                                      ;
;   This file is part of ICP, an Indirect Command Processor for        ;
;   RSX180. Copyright (C) 2015-2020, Hector Peraza.                    ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   Expression evaluation.

	.Z80

	include	ICP.INC

	public	EVAL,SEVAL,VNAME,ERRTYP,ERRUND,ERRSTL,ERRMEM

	extrn	ATOI,HLNEG,ISDIG,GETVAR,ALLOC,UCASE,SKIPBL
	extrn	LNPTR,ERROR,CMDERR,STRLEN

s$null	equ	0	; symbol types used in expression eval
s$var	equ	1
s$num	equ	2
s$op	equ	3
s$err	equ	4

maxstr	equ	132

;-----------------------------------------------------------------------

; Check for letter, returns CY clear on success

isletr:	cp	'A'
	ret	c
	cp	'Z'+1
	ccf
	ret	nc
	cp	'a'
	ret	c
	cp	'z'+1
	ccf
	ret

; Check for valid variable name character, returns CY set on bad character.

isvok:	call	ISDIG
	ret	nc
isvs:	call	isletr
	ret	nc
	cp	'$'
	ret	z
	cp	'_'
	ret	z
	scf
	ret

;-----------------------------------------------------------------------

; Extract variable name from a string, returns CY on error.
; On input HL points to string. Stores the variable name at DE address.
; Returns with HL pointing to first invalid char.

VNAME:	xor	a
	ld	(idspec),a
	ld	b,12		; B = max length
	ld	a,(hl)
	cp	'<'		; special variable?
	jr	nz,vn0		; jump if not
	inc	hl
	ld	a,1
	ld	(idspec),a	; else set flag
	ld	a,(hl)
vn0:	call	isvs		; first char must be a letter or $ or _
	ret	c
vn1:	call	UCASE
	ld	(de),a
	inc	hl
	inc	de
	dec	b
	jr	z,nv4
	ld	a,(hl)
	call	isvok
	jr	nc,vn1
vn2:	xor	a
	ld	(de),a
	ld	a,(idspec)
	ld	c,a		; return 'special variable' flag in C
	or	a
	ret	z
	ld	a,(hl)
	cp	'>'
	scf
	ret	nz
	inc	hl
	or	a
	ret
vn3:	inc	hl
nv4:	ld	a,(hl)		; ignore all extra chars of name
	call	isvok
	jr	c,vn2
	jr	vn3

;-----------------------------------------------------------------------

; Process string expression.

; TODO: handle [n1:n2] and <vars>

; Evaluate string expression, return pointer to new string in the
; dynamic area in HL and in 'dsptr' (the last done by ALLOC).

SEVAL:	ld	hl,(LNPTR)
	ld	b,maxstr-1	; B = counter
	ld	a,1
	ld	(symtyp),a	; use symtyp as concatenation balance check
	ld	de,strbuf	; DE = start of intermediate buffer
exps1:	call	SKIPBL
	ld	a,(hl)
	or	a		; end of line?
	jp	z,exps6		; jump if yes
	cp	'"'		; quoted string?
	jp	z,doquot	; jump if yes
	cp	'+'		; concatenation?
	jp	z,concat	; jump if yes
	cp	'&'
	jp	z,concat
	ld	a,(symtyp)	; else must be an identifier
	dec	a		; decrement concatenation counter
  IF 0
	jp	nz,CMDERR	; must be zero at this point
  ELSE
	jp	nz,exps6
  ENDIF
	ld	(symtyp),a
	push	de		; push dst pos
	push	bc		; push counter
	ld	de,idname
	call	VNAME		; extract variable name into idname
	ld	(LNPTR),hl	; remember position to continue afterwards
	pop	bc		; pop counter
	jr	c,exps21	; jump if error
	push	bc
	ld	de,idname
	ld	a,(idspec)
	call	GETVAR		; else search for variable
	ld	a,c		; get type into A
	pop	bc
	jr	c,exps2		; error if not found
	cp	V.STR		; string variable?
	jr	nz,exps23	; error if not
	call	strseg		; check for [n:m]
	pop	de		; pop dst pos
	inc	c
exps4:	dec	c
	jr	z,exps5
	ld	a,(hl)
;;	or	a		; check for end of variable text
	ld	(de),a		; else copy chars
	inc	hl
	inc	de
	djnz	exps4		; loop
ERRSTL:	ld	hl,emsstl
	jp	ERROR

emsstl:	db	'String too long',0

exps5:	ld	hl,(LNPTR)	; use new src pointer
	jp	exps1		; loop to process next term

exps23:	pop	de
ERRTYP:	ld	hl,emstyp
	jp	ERROR

exps2:	pop	de		; error, pop dst
ERRUND:	ld	hl,emsund
	jp	ERROR

emstyp:	db	'Type mismatch',0
emsund:	db	'Undefined variable',0

exps21:	pop	de		; else error, pop dst
	jp	CMDERR

concat:	ld	a,(symtyp)
	or	a
	jp	nz,CMDERR
	inc	a
	ld	(symtyp),a
	inc	hl
	jp	exps1

doquot:	ld	a,(symtyp)
	dec	a
  IF 0
	jp	nz,CMDERR
  ELSE
	jr	nz,exps6
  ENDIF
	ld	(symtyp),a
	call	qstr		; extract quoted string
	jr	c,ERRSTL	; jump if error
	jp	exps1

exps6:	ld	(LNPTR),hl
	ld	a,(symtyp)
	or	a
	jp	nz,CMDERR
	xor	a
	ld	(de),a
	ld	hl,strbuf
	call	ALLOC		; allocate new string in dynamic area
	ret	nc		; return on success
ERRMEM:	ld	hl,nmerr
	jp	ERROR

nmerr:	db	'Not enough memory',0

strseg:	push	bc
	call	sseg		; save string pointer and length
	ld	hl,(LNPTR)
	ld	a,(hl)
	cp	'['		; substring specification?
	jr	nz,sseg8	; jump if not
	inc	hl
	ld	(LNPTR),hl
	call	EVAL		; get start index
	push	de
	ld	hl,(LNPTR)
	ld	a,(hl)
	cp	':'
	jp	nz,CMDERR
	inc	hl
	ld	a,(hl)
	cp	'*'		; '*' here means up to end of string
	jr	nz,sseg0
	inc	hl
	ld	(LNPTR),hl
	ld	a,(slen)
	ld	e,a
	ld	d,0
	jr	sseg1
sseg0:	ld	(LNPTR),hl
	call	EVAL		; get end index
sseg1:	ld	hl,(LNPTR)
	ld	a,(hl)
	cp	']'
	jp	nz,CMDERR
	inc	hl
	ld	(LNPTR),hl
	pop	hl		; DE = end, HL = start
	dec	hl		; make start 0-based
	ex	de,hl		; DE = start-1, HL = end
	or	a
	sbc	hl,de		; len = end - (start-1)
	jp	nc,sseg2	; jump if > 0
	ld	hl,(sptr)
	pop	bc
	ld	c,0		; else result is null string
	ret

sseg2:	ld	a,d		; DE = start-1, HL = len
	or	a		; start-1 > 255?
	jr	nz,sseg3	; jump if yes
	ld	a,(slen)
	sub	e
	ld	c,a
	jr	nc,sseg4	; jump if <= string length
sseg3:	ld	c,0		; else result is null string
sseg4:	push	hl
	ld	hl,(sptr)
	add	hl,de
	ld	(sptr),hl	; save substring start
	pop	hl
	ld	a,h
	or	a		; len > 255?
	jr	nz,seg7		; return if yes
	ld	a,c
	cp	l		; string length < len?
	jr	c,seg7		; jump if yes - return string length
	ld	c,l		; else return len
seg7:	ld	a,c
	ld	hl,(sptr)
	pop	bc
	ld	c,a
	ret

sseg8:	ld	hl,(sptr)
	ld	a,(slen)	; return full string length
	pop	bc
	ld	c,a
	ret

sseg:	ld	(sptr),hl
	call	STRLEN
	ld	a,c
	ld	(slen),a
	ret

;-----------------------------------------------------------------------

; Get quoted string @HL into buffer @DE, max chars in B. On input, HL
; points to quote character. On exit HL points to char after the closing
; quote and DE after last stored char. The extracted string does not include
; a terminating null. Returns with CY flag set on output buffer overflow.

qstr:	ld	c,(hl)		; remember quote character
qs1:	inc	hl
	ld	a,(hl)
	or	a		; end of string?
	ret	z		; return with CY clear if yes
	cp	c		; quote character?
	jr	nz,qs2		; jump if not
	inc	hl
	ld	a,(hl)
	cp	c		; check for two quote chars in a row
	jr	nz,qs3		; nope, return; else store single quote
qs2:	ld	(de),a		; store char in dest buffer
	inc	de
	djnz	qs1
	scf			; output buffer overflow, return with CY set 
	ret
qs3:	or	a		; success, return with CY clear
	ret

;-----------------------------------------------------------------------

; Numeric expresssion evaluation routines

; --- getsym

getsym:	ld	a,s$null
	ld	(symtyp),a
	ld	hl,(LNPTR)
	call	SKIPBL		; skip spaces
	ld	(LNPTR),hl
	or	a		; end of line?
	ret	z		; return symtyp = s$null if yes
  if 1
	cp	'['
	ret	z
	cp	':'
	ret	z
	cp	']'
	ret	z
  endif
	push	af
	ld	a,s$err
	ld	(symtyp),a
	pop	af
	call	isvs		; if letter, $ or _ try variable name
	jr	nc,gsvar
	cp	'<'
	jr	z,gsvar
	call	ISDIG		; if number, convert it
	jr	nc,gsnum
	ex	de,hl
	ld	hl,ops
	ld	c,a
gsym1:	ld	a,(hl)
	or	a
	ret	z
	cp	c
	inc	hl
	jr	nz,gsym1
	ex	de,hl
	inc	hl
	ld	(LNPTR),hl
	ld	a,s$op
	ld	(symtyp),a
	ld	hl,idname
	ld	(hl),c		; store operator
	inc	hl
	ld	(hl),0
	ret

gsvar:	ld	de,idname
	call	VNAME		; extract identifier name
;	ret	c
	ld	(LNPTR),hl
	ld	a,s$var
	ld	(symtyp),a
	ret

gsnum:	ex	de,hl
	call	ATOI		; TODO: check for overflow!
	ld	(idname),hl	; use idname to return the number
	ex	de,hl
	ld	(LNPTR),hl
	ld	a,s$num
	ld	(symtyp),a
	ret

ops:	db	'+-*/%()',0

; --- factor

factor:	ld	a,(symtyp)
	cp	s$null
	ret	z
	cp	s$var
	jr	z,fvar
	cp	s$num
	jr	z,fnum
	cp	s$op
	jr	z,fop
	jp	CMDERR

fvar:	ld	de,idname
	ld	a,(idspec)
	call	GETVAR
	ex	de,hl
	jp	c,ERRUND	; error if not found
	ld	a,c
	cp	V.NUM		; numeric variable?
	jp	nz,ERRTYP	; error if not
fcv1:	push	de
	call	getsym
	pop	de
	ret

fnum:	ld	de,(idname)
	jr	fcv1

fop:	ld	a,(idname)
	cp	'('
	jp	nz,CMDERR
	call	EVAL		; expr
	ld	a,(symtyp)
	cp	s$op
	jp	nz,CMDERR
	ld	a,(idname)
	cp	')'
	jp	nz,CMDERR
	jr	fcv1

; --- term

term:	call	factor
term0:	ld	a,(symtyp)
	cp	s$op
	ret	nz
	ld	a,(idname)
	cp	'*'
	jr	z,term1
	cp	'/'
	jr	z,term1
	cp	'%'
	ret	nz
term1:	push	af
	push	de		; n
	call	getsym
	call	factor		; m in DE
	pop	hl		; n in HL
	pop	af
	cp	'*'
	jr	nz,term2
	call	mult		; HL = HL * DE
	ex	de,hl
	jr	term0
term2:	cp	'/'
	jr	nz,term3
	call	div		; HL = HL / DE
	ex	de,hl
	jr	term0
term3:	call	div		; DE = HL % DE
	jr	term0

; --- expr

; Evaluate numeric expression, return result in DE

EVAL:	call	getsym
	ld	a,(symtyp)
	cp	s$op
	jr	nz,exp2
	ld	a,(idname)
	cp	'+'
	jr	z,exp1
	cp	'-'
	jr	nz,exp2
exp1:	push	af
	call	getsym
	call	term
	pop	af
	cp	'-'
	ex	de,hl
	call	z,HLNEG
	ex	de,hl
	jr	exp3
exp2:	call	term
exp3:	ld	a,(symtyp)
	cp	s$op
	ret	nz
	ld	a,(idname)
	cp	'+'
	jr	z,exp4
	cp	'-'
	ret	nz
exp4:	push	af
	push	de
	call	getsym
	call	term
	ex	de,hl		; m
	pop	de		; n
	pop	af
	cp	'-'
	call	z,HLNEG		; -m
	add	hl,de
	ex	de,hl
	jr	exp3

; HL = HL * DE

mult:	push	bc
	ld	c,d
	ld	a,e
	ex	de,hl
	ld	hl,0
	call	mult1
	ld	a,c
	call	mult1
	pop	bc
	ret

mult1:	ld	b,8
mu1:	rra
	jr	nc,mu2
	add	hl,de
mu2:	ex	de,hl
	add	hl,hl
	ex	de,hl
	djnz	mu1
	ret

; HL = HL / DE, remainder in DE (signed)

div:	ld	a,h
	xor	d
	push	af		; remember if quotient sign has to be changed
	ld	a,h
	or	a
	push	af		; remember dividend sign
	call	m,HLNEG
	ex	de,hl
	ld	a,h
	or	a
	call	m,HLNEG
	ld	c,l
	ld	b,h
	ld	hl,0
	ld	a,16
dv1:	push	af
	add	hl,hl
	ex	de,hl
	sub	a
	add	hl,hl
	ex	de,hl
	adc	a,l
	sub	c
	ld	l,a
	ld	a,h
	sbc	a,b
	ld	h,a
	inc	de
	jr	nc,dv2
	add	hl,bc
	dec	de
dv2:	pop	af
	dec	a
	jr	nz,dv1
	pop	af
	call	m,HLNEG
	ex	de,hl
	pop	af
	call	m,HLNEG		; remainder has same sign as dividend
	ret

;-----------------------------------------------------------------------

	dseg

strbuf:	ds	maxstr	; temporary storage for string expressions
sptr:	ds	2	; temporary string pointer
slen:	ds	1	; temporary string length

symtyp:	ds	1	; symbol type during expr eval (symbol in lnbuf)
cndtyp:	ds	1	; conditional type

idspec:	ds	1	; 'special variable' flag
idname:	ds	13	; temporary storage for variable identifiers

	end
