;**********************************************************************;
;                                                                      ;
;   Simple Z280 debug module for RSX280 user tasks.                    ;
;   Copyright (C) 2021, Hector Peraza.                                 ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z280

	ident	/V0.1/

	include	SYSFN.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h

FALSE	equ	0
TRUE	equ	NOT FALSE

MAXBP	equ	8		; max number of breakpoints

	cseg

	public	ODT$,ODT$IN,?HLHEX,?AHEX

	extrn	ODT$CI,ODT$CO,ODT$CS,ODT$EX,DIS280

;-----------------------------------------------------------------------

; Init entry point.

ODT$IN:	ld	hl,sstvt
	SC	.SVTBL		; setup SST table
	xor	a
	ld	(numbp),a	; no breakpoints set
	ld	(tmpbp+3),a
	ret

; Debugger entry point.
; Called with HL = initial user PC and DE = initial user SP.

ODT$:	ld	(pgm_pc),hl	; save initial PC
	ld	(lastd),hl	; also as default for D and L commands
	ld	(lastz),hl
	dec	de		; adjust SP, assume PC was pushed
	dec	de
	ld	(pgm_sp),de	; store adjusted user SP
	ld	hl,0
	ld	(pgm_msr),hl	; initial MSR
	ld	hl,banner
	call	print
cmd_loop:
	ld	sp,stack	; restore local stack
	xor	a
	ld	(mode),a
	ld	hl,prompt
	call	print		; output prompt
	call	getln		; get command
	push	cmd_loop	; push return address
	ld	hl,lnbuf
	call	skipbl		; skip blanks and get command char
	or	a
	ret	z		; ignore empty lines
	inc	hl
	ld	(lnptr),hl
	call	ucase		; convert command char to uppercase
	cp	'X'		; show regs?
	jp	z,showregs
	push	af
	call	get_args	; parse command and get arguments
	ld	bc,(arg3)	; load arguments into registers
	ld	de,(arg2)
	ld	hl,(arg1)
	pop	af
	cp	'D'		; dump?
	jp	z,dump
	cp	'F'		; fill?
	jp	z,fill
	cp	'S'		; search?
	jp	z,search
	cp	'E'		; examine?
	jp	z,exam
	cp	'B'		; set breakpoint?
	jp	z,addbrk
	cp	'C'		; clear breakpoint?
	jp	z,clrbrk
	cp	'G'		; go?
	jp	z,run
	cp	'T'		; trace (single-step)?
	jp	z,trace
	cp	'W'		; word?
	jp	z,word
	cp	'L'		; list?
	jp	z,disasm
	cp	'Q'		; quit?
	jp	z,ODT$EX
error:	call	cr_lf
	ld	c,'?'		; unknown command
	call	ODT$CO
	jr	cmd_loop

banner:	db	CR,LF,"ODT V0.2",CR,0
prompt:	db	CR,LF,"_",0

; get command line

getln:	ld	hl,lnbuf	; HL = start of command buffer
	ld	b,1
get:	call	ODT$CI		; get char
	cp	CR
	jr	z,eol		; CR ends command
	cp	8
	jr	z,bkspc		; del and backspace erase prev char
	cp	7Fh
	jr	z,bkspc
	cp	3
	jr	z,ctrlc		; ^C restarts
	cp	' '
	jr	c,get		; ignore any other control chars
	ld	c,a
	ld	a,b
	cp	40-1		; max length reached?
	jr	nc,get		; ignore extra input if yes
	call	ODT$CO		; echo char
	ld	(hl),c		; store in buffer
	inc	hl		; advance pointer
	inc	b		;  and counter
	jr	get		; loop
bkspc:	dec	b
	jr	z,getln
	ld	c,8
	call	ODT$CO		; erase prev char from the screen
	call	space
	ld	c,8
	call	ODT$CO
	dec	hl
	jr	get
eol:	ld	(hl),0		; end of input, append null char
	ld	c,a
	call	ODT$CO
	ret
ctrlc:	ld	hl,ctlcm
	call	print
	jp	cmd_loop

ctlcm:	db	"^C",CR,0

; convert char to uppercase

ucase:	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5Fh
	ret

; output string

print:	ld	a,(hl)
	or	a
	ret	z
	ld	c,a
	call	ODT$CO
	inc	hl
	jr	print

; skip blanks

skip:	inc	hl
skipbl:	ld	a,(hl)
	or	a
	ret	z
	cp	' '
	jr	z,skip
	cp	TAB
	jr	z,skip
	ret

; get command line arguments

get_args:
	ld	hl,0
	ld	(arg1),hl	; unspecified args default to zero
	ld	(arg2),hl
	ld	(arg3),hl
	xor	a
	ld	(argset),a
	ld	de,(lnptr)
	ld	c,01h
	call	gethex		; get first arg
	ld	(arg1),hl
	ld	(arg2),hl
	ret	c
	ld	c,02h
	call	gethex		; get second arg
	ld	(arg2),hl
	ret	c
	ld	c,04h
	call	gethex		; get third arg
	ld	(arg3),hl
	ret	c
	jp	error		; error if more args

; get hexadecimal value from command line

gethex:	ld	hl,0
gh1:	ld	a,(de)
	or	a		; end of command line?
	scf			; return with CY set if yes
	ret	z
	inc	de
	cp	' '		; ignore blanks
	jr	z,gh1
	cp	','		; comma separates arguments
	ret	z
	call	tohex
	jp	c,error
	call	adddig
	jp	c,error
	ld	a,(argset)
	or	c		; set bit if argument present
	ld	(argset),a
	jr	gh1
	
adddig:	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,a
	ret

tohex:	call	ucase
	sub	'0'
	ret	c
	cp	10
	ccf
	ret	nc
	cp	11h
	ret	c
	cp	17h
	ccf
	ret	c
	sub	7
	ret

; compare addresses and return one level higher if they match

next:	call	?stop		; check for ^C abort
	cpw	hl,de		; end address reached?
	jr	z,cmp_eq	; return one level higher if yes
	inc	hl		; else increment HL and return
	ret
cmp_eq:	inc	sp
	inc	sp
	ret

; check for ^C abort or XON/XOFF

?stop:	call	ODT$CS
	or	a
	ret	z
	call	ODT$CI
	cp	3		; ^C aborts
	jp	z,ctrlc
	cp	13h		; ^S suspends output
	ret	nz
	call	ODT$CI
	cp	3
	jp	z,ctrlc
	ret

; D addr1,addr2
; Dump region addr1...addr2

dump:	ld	a,(argset)
	bit	0,a		; start address specified?
	jr	nz,dmp1		; use it if yes
	ld	hl,(lastd)	; else continue from where we stopped before
dmp1:	bit	1,a		; end address specified?
	jr	nz,dmp2		; use it if yes
	ld	e,l
	ld	d,h
	inc	d
	dec	de		; else display one 256-byte page

dmp2:	call	out_addr	; output address
	push	hl
	call	dmps3		; align start
dmph:   ld	a,(hl)		; get byte
	call	outbyte		; output it as hexadecimal
	call	?stop		; check for ^C abort
	cpw	hl,de
	jr	z,enddmp	; exit loop when done
	inc	hl		; advance pointer
	ld	a,l
	and	0Fh		; max 16 bytes per line
	jr	nz,dmph
	pop	hl
	call	dmpa		; dump ASCII as well
	jr	dmp2

enddmp:	inc	hl
	ld	a,l
	neg	a
	ld	(lastd),hl	; remember where we stopped
	ld	l,a
	call	dmps3		; align end
	pop	hl
dmpa:	ld	c,1
	call	dmps		; align start
dmp3:	ld	a,(hl)		; get byte
	cp	' '		; printable?
	jr	c,outdot
	cp	7Fh
	jr	c,char
outdot:	ld	a,'.'		; output a dot if not
char:	ld	c,a
	call	ODT$CO
	call	?stop		; check for ^C abort
	cpw	hl,de
	ret	z		; return when done
	inc	hl
	ld	a,l
	and	0Fh		; max 16 chars per line
	jr	nz,dmp3
	ret

dmps3:	ld	c,3
dmps:	ld	a,l
	and	0Fh
	ret	z
	push	de
	ld	b,a
	ld	e,c
dmp4:	ld	d,e
dmp5:	call	space
	dec	d
	jr	nz,dmp5
	djnz	dmp4
	pop	de
	ret

; F addr1,addr2,byte
; Fill region addr1...addr2 with byte

fill:	ld	(hl),c
	call	next
	jr	fill

; S addr1,addr2,byte
; Search region addr1...addr2 for byte

search:	ld	a,c
	cp	(hl)		; byte matches?
	jr	nz,scont	; branch if not
	call	out_addr	; else output address
	dec	hl
	ld	a,(hl)
	call	outbyte		; output prev byte
	ld	c,'('
	call	ODT$CO
	inc	hl
	ld	a,(hl)
	call	?AHEX		; output matching byte
	ld	c,')'
	call	ODT$CO
	call	space
	inc	hl
	ld	a,(hl)
	call	outbyte		; output following byte
	dec	hl
scont:	call	next
	jr	search

; E addr
; Examine and modify memory starting at addr

exam:	call	out_addr	; output address
	ld	a,(hl)
	call	outbyte		; output old contents
	push	hl
	call	getln		; read line
	pop	de
	ld	hl,lnbuf
	call	skipbl		; skip blanks
	ex	de,hl
	or	a
	jr	z,cont		; empty line keeps old value
	cp	'.'
	ret	z		; dot (or ^C in getln) ends operation
	push	hl
	call	gethex		; get new value
	ex	de,hl		;  into DE
	pop	hl
	ld	(hl),e		; store it
cont:	inc	hl
	jr	exam		; loop

; W addr
; display Word at addr

word:	call	out_addr	; output address
	ld	hl,(hl)
	jp	?HLHEX		; output contents

; B
; display current Breakpoints
; B addr
; set Breakpoint at addr.

addbrk:	ld	ix,bptbl	; get breakpoint table address into IX
	ld	a,(argset)
	and	01h		; argument given?
	jr	nz,setb		; set breakpoint if yes
	ld	a,(numbp)
	or	a		; any breakpoints set?
	ret	z		; return if not
	ld	b,a
	ld	de,3
dispbp:	ld	hl,(ix)
	call	cr_lf
	call	?HLHEX		; display breakpoint address
	add	ix,de
	djnz	dispbp		; loop to process next
	ret

setb:	ld	a,(numbp)
	cp	MAXBP		; maximum already reached?
	jp	nc,error	; error if yes
	or	a		; table empty?
	jr	z,sb2		; branch if yes
	ld	b,a
	ld	de,3
sb1:	cpw	hl,(ix)		; breakpoint already exists?
	jp	z,error		; error if yes
	add	ix,de
	djnz	sb1		; else loop to check next entry
sb2:	ldw	(ix),hl		; store breakpoint address
	ld	hl,numbp
	inc	(hl)		; new breakpoint address
	ret

; C addr
; Clear breakpoint at addr.

clrbrk:	ld	a,(argset)
	and	01h
	jp	z,error		; argument is mandatory
	ld	ix,bptbl	; get breakpoint table address into IX
	ld	a,(numbp)
	or	a		; any breakpoints set?
	jp	z,error		; error if not
	ld	b,a
	ld	de,3
cb1:	cpw	hl,(ix)		; breakpoint found?
	jr	z,cb2		; exit loop if yes
	add	ix,de
	djnz	cb1		; loop to process next entry
	jp	error		; breakpoint not found
cb2:	ld	hl,numbp
	dec	(hl)		; decrement breakpoint count
	dec	b		; last used entry?
	ret	z		; return if yes
cb3:	ldw	hl,(ix+3)
	ldw	(ix),hl		; else shuffle entries down
	add	ix,de
	djnz	cb3
	ret

; L addr,num
; List (disassemble) num instructions starting from addr

disasm:	ld	a,(argset)
	bit	0,a		; address given?
	jr	nz,dis1		; use it if yes
	ld	hl,(lastz)	; else continue from where we ended last time
	ld	(arg1),hl
dis1:	bit	1,a		; count given?
	jr	nz,dis2		; use it if yes
	ld	de,16		; else default to 16
	ld	(arg2),de
dis2:	ld	a,d
	or	e
	jr	z,dis3
	ld	hl,(arg1)
	call	out_addr	; output address
	ld	c,TAB
	call	ODT$CO		; output TAB separator
	call	DIS280		; output mnemonic (instruction address in HL)
	ld	(arg1),hl
	ld	c,CR
	call	ODT$CO
	call	?stop		; check for ^C abort
	ld	hl,(arg2)
	dec	hl		; decrement count
	ld	(arg2),hl
	ex	de,hl
	jr	dis2		; and loop
dis3:	ld	hl,(arg1)
	ld	(lastz),hl	; remember where we stopped
	ret

; G [addr][,break]
; Go (execute) program at addr. If no address was specified, continue from
; last PC. If a break address is given, place a temporary breakpoint at
; that address.

run:	ld	ix,(pgm_sp)
	ld	a,(argset)
	bit	0,a		; an address was given?
	jr	nz,r1		; yes, use it
	ld	hl,(pgm_pc)	; else continue from saved PC
r1:	ldw	(ix),hl		; store PC on return stack
	bit	1,a		; break address given?
	jr	z,r2
	ld	hl,(arg2)
	ld	(tmpbp),hl	; yes, set temporary breakpoint
	ld	a,1
	ld	(tmpbp+3),a
r2:	ld	hl,1000h	; SS and SSP bits clear, BH bit set
	ld	(pgm_msr),hl
	call	setbp		; set breakpoints in place
	jp	continue

; place breakpoints prior to executing user code

setbp:	ld	ix,tmpbp
	ld	a,(ix+3)
	or	a		; temporary breakpoint active?
	ld	b,1
	call	nz,set1		; yes, set it
	ld	ix,bptbl	; point to table of hard breakpoints
	ld	a,(numbp)
	or	a		; any breakpoints defined?
	ret	z		; return if not
	ld	b,a
	ld	de,3
set1:	ld	hl,(ix)		; get breakpoint address
	ld	a,(hl)
	ld	(ix+2),a	; remember original memory contents
	ld	(hl),76h	; store halt instruction (breakpoint-on-halt mode)
	add	ix,de
	djnz	set1
	ret

; remove breakpoints from user code so they will not appear in the
; disassembler listing and will not interfere with single-stepping

rembp:	ld	ix,tmpbp
	ld	a,(ix+3)
	or	a		; temporary breakpoint active?
	jr	z,rem1
	ld	b,1
	call	rem2		; yes, remove it
	cpw	hl,(pgm_pc)	; just hit?
	jr	nz,rem1
	xor	a
	ld	(tmpbp+3),a	; yes, disable it
rem1:	ld	ix,bptbl	; point to table of hard breakpoints
	ld	a,(numbp)
	or	a		; any breakpoints defined?
	ret	z		; return if not
	ld	b,a
	ld	de,3
rem2:	ldw	hl,(ix)		; get breakpoint address
	ld	a,(ix+2)
	ld	(hl),a		; restore original memory contents
	add	ix,de
	djnz	rem2
	ret

; T
; Trace single instruction
; T num
; Trace num instructions

trace:	ld	a,h
	or	l
	jr	nz,tr1
	ld	hl,1		; no argument or zero count defaults to 1
tr1:	ld	(tcount),hl
trnext:	ld	ix,(pgm_sp)
	ld	hl,(pgm_pc)	; store PC on return stack
	ldw	(ix),hl		;  in case user changed it
	ld	hl,1100h	; SS bit set, SSP clear, BH bit set
	ld	(pgm_msr),hl
	jp	continue

; display 16-bit address followed by a colon and a space

out_addr:
	call	cr_lf
	call	?HLHEX		; output address word
	ld	c,':'
	call	ODT$CO		; output colon
	jr	space		; output space and return

; display 8-bit value followed by a space

outbyte:
	call	?AHEX
space:	ld	c,' '
	jp	ODT$CO

; display 16-bit hexadecimal value

?HLHEX:	ld	a,h
	call	?AHEX
	ld	a,l
?AHEX:	push	af
	rrca
	rrca
	rrca
	rrca
	call	nhex
	pop	af
nhex:	and	0Fh
	add	a,90h
	daa
	adc	a,40h
	daa
	push	bc
	ld	c,a
	call	ODT$CO
	pop	bc
	ret

; output newline

cr_lf:	ld	c,CR
	call	ODT$CO
	ld	c,LF
	jp	ODT$CO

; trap entry point: saves all registers and jumps to the command loop.

debug_trap:
	ld	(pgm_sp),sp	; save user SP
	ld	sp,reg_stack
	push	af		; push main reg bank
	push	bc
	push	de
	push	hl
	ex	af,af'
	push	af		; push alternate reg bank
	ex	af,af'
	exx	
	push	bc
	push	de
	push	hl
	exx
	push	ix		; push index regs
	push	iy
	ld	sp,stack	; switch to local stack
	ld	ix,(pgm_sp)
	ldw	de,(ix)
	ld	(pgm_pc),de	; save user PC
	ld	(lastz),de	; use as default for L command
	ld	a,(reason)
	dec	a		; single-stepping?
	call	nz,rembp	; remove breakpoints if not
	call	pr_reason	; display trap reason
	call	shregs		; display register contents
	ld	(mode),0	; back to debugger context
	ld	hl,(pgm_pc)
	ld	(arg1),hl
	ld	c,TAB
	call	ODT$CO
	call	ODT$CO
	call	DIS280		; display next instruction (address in HL)
	ld	a,(reason)
	dec	a		; single-stepping?
	jr	nz,dbg2		; branch if not
	ld	hl,(tcount)
	dec	hl
	ld	(tcount),hl
	ld	a,h
	or	l		; trace count reached zero?
	jp	nz,trnext	; trace next instruction if not
dbg2:	ld	hl,(pgm_hl)
	ld	(lastd),hl	; use HL value as default for D command
	jp	cmd_loop

; display trap reason

pr_reason:
	ld	a,(reason)
	or	a
	ld	hl,brk_msg
	jr	z,pr1
	dec	a
	ret	z		; don't print anything if single-stepping
	dec	a
	ld	hl,div_msg
	jr	z,pr1
	dec	a
	ld	hl,acv_msg
	jr	z,pr1
	dec	a
	ld	hl,prv_msg
	jr	z,pr1
	dec	a
	ld	hl,ext_msg
	ret	nz
pr1:	call	print		; display reason
	ld	a,(mode)
	or	a		; user program mode?
	ret	z		; no, return
	ld	hl,atpc_msg
	call	print		; else display trap address
	ld	hl,(pgm_pc)
	jp	?HLHEX		; output address

brk_msg:
	db	CR,LF,"Break",0
div_msg:
	db	CR,LF,"Divide exception",0
acv_msg:
	db	CR,LF,"Access violation",0
prv_msg:
	db	CR,LF,"Privileged instruction",0
ext_msg:
	db	CR,LF,"Extended instruction",0
atpc_msg:
	db	" at PC=",0

; continue execution from last breakpoint or single-step operation

continue:
	ld	sp,pgm_iy
	pop	iy		; restore index regs
	pop	ix
	exx
	pop	hl		; restore alternate reg bank
	pop	de
	pop	bc
	exx
	ex	af,af'
	pop	af
	ex	af,af'
	pop	hl		; restore main reg bank
	pop	de
	pop	bc
	pop	af
	ld	sp,(pgm_sp)	; prepare to return from trap
	push	(pgm_msr)	; push MSR with desired SS bits
	ld	(mode),1	; entering user program mode
	retil

; X
; show CPU register contents
; Xrr
; display/modify CPU register

showregs:
	ld	hl,(lnptr)
	call	skipbl
	or	a		; anything follows command?
	jp	z,shregs	; no, display all regs
	ld	(lnptr),hl
	ld	hl,regdat
chrg1:	ldw	de,(hl)		; get pointer to reg value into DE
	ld	a,d
	or	e		; end of list?
	jp	z,error		; error if yes, reg name not found
	inc	hl
	inc	hl		; point to string
	push	de
	call	rmatch		; register name matches?
	pop	de
	jr	z,chrg3		; branch if yes
chrg2:	ld	a,(hl)		; else skip this entry
	inc	hl
	or	a
	jr	nz,chrg2
	jr	chrg1

chrg3:	call	cr_lf
	call	print		; output register name
	dec	hl
	ld	a,'='
	cp	(hl)
	ld	c,a
	call	nz,ODT$CO	; follow alt regs with '='
	ex	de,hl
	push	hl
	ldw	hl,(hl)
	call	?HLHEX		; output reg value
	call	space
	call	getln		; read line
	pop	de
	ld	hl,lnbuf
	call	skipbl		; skip blanks
	ld	(lnptr),hl
	or	a
	ret	z		; empty line keeps old value
	cp	'.'
	ret	z		; as does dot
	push	de
	ld	de,(lnptr)
	call	gethex		; get new value
	ex	de,hl		;  into DE
	pop	hl
	ldw	(hl),de		; store it
	ret

rmatch:	ld	a,(hl)
	inc	hl
	cp	' '		; skip blanks
	jr	z,rmatch
	cp	CR		;  CR
	jr	z,rmatch
	cp	LF		;   and LF
	jr	z,rmatch
	dec	hl
	push	hl		; remember start of reg name
	ld	de,(lnptr)
rm1:	ld	a,(hl)
	or	a		; end of name?
	jr	z,rm4		; return Z if yes
	cp	'='
	jr	z,rm2
	ld	c,a
	ld	a,(de)
	call	ucase
	cp	c		; name matches?
	jr	nz,rm4		; return NZ if not
	inc	hl
	inc	de
	jr	rm1		; loop
rm2:	ld	a,(de)
	cp	"'"
	jr	z,rm3
	xor	a
rm3:	or	a
rm4:	pop	hl
	ret

shregs:	ld	hl,regdat
srg1:	ldw	de,(hl)		; get pointer to register value into DE
	ld	a,d
	or	e		; end of list?
	ret	z		; return if yes
	inc	hl
	inc	hl		; point to start of string
	ex	de,hl
	ldw	bc,(hl)		; get register value into BC
	push	bc
	ex	de,hl
	call	print		; output register name
	ex	(sp),hl
	call	?HLHEX		; output value
	pop	hl
	inc	hl
	jr	srg1

regdat:	dw	pgm_af
	db	CR,LF,"AF=",0
	dw	pgm_bc
	db	" BC=",0
	dw	pgm_de
	db	" DE=",0
	dw	pgm_hl
	db	" HL=",0
	dw	pgm_ix
	db	" IX=",0
	dw	pgm_iy
	db	" IY=",0
	dw	pgm_af1
	db	CR,LF,"AF'",0
	dw	pgm_bc1
	db	" BC'",0
	dw	pgm_de1
	db	" DE'",0
	dw	pgm_hl1
	db	" HL'",0
	dw	pgm_sp
	db	" SP=",0
	dw	pgm_pc
	db	" PC=",0
	dw	0

;-----------------------------------------------------------------------

; SST vector table

sstvt:	dw	eitrp1		; EPU trap
	dw	eitrp2		; EPU trap
	dw	prvins		; privileged instruction trap
	dw	0		; unrecognized system trap
	dw	acvtrp		; access violation trap
	dw	divtrp		; division trap
	dw	sstrp		; single-step trap
	dw	bptrp		; breakpoint-on-halt trap

bptrp:	ld	(reason),0
	jp	trap

sstrp:	ld	(reason),1
	jp	trap

divtrp:	ld	(reason),2
	jp	trap

acvtrp:	ld	(reason),3
	jp	trap

prvins:	ld	(reason),4
	jp	trap

eitrp2:	inc	sp
	inc	sp
eitrp1:	inc	sp
	inc	sp
	ld	(reason),5
trap:	push	af
	ld	a,(mode)	; trap happened in user program?
	or	a
	jr	nz,trap1	; yes, break execution
	call	pr_reason	; no, display trap reason
	jp	cmd_loop	; and restart debugger
trap1:	pop	af
	jp	debug_trap

;-----------------------------------------------------------------------

	dseg

arg1:	ds	2		; fisrt command argument
arg2:	ds	2		; second command argument
arg3:	ds	2		; third command argument
argset:	ds	1		; specified argument bit mask

lnbuf:	ds	40		; command line buffer
lnptr:	ds	2		; command line pointer

pgm_iy:	ds	2		; saved user registers
pgm_ix:	ds	2
pgm_hl1:ds	2
pgm_de1:ds	2
pgm_bc1:ds	2
pgm_af1:ds	2
pgm_hl:	ds	2
pgm_de:	ds	2
pgm_bc:	ds	2
pgm_af:	ds	2
reg_stack equ	$
pgm_sp:	ds	2
pgm_pc:	ds	2
pgm_msr:ds	2		; fake MSR for setting SS bits

numbp:	ds	1		; number of breakpoints set
bptbl:	ds	MAXBP*3		; breakpoint table: address + mem contents
tmpbp:	ds	4		; temporary breakpoint for run command:
				;  address + mem contents + active flag

brkadr:	ds	2		; breakpoint address
brkval:	ds	1		; breakpoint memory contents

mode:	ds	1
reason:	ds	1		; trap reason code
lastd:	ds	2		; last dump address
lastz:	ds	2		; last disassembled address
tcount:	ds	2		; instruction trace count

	ds	128		; space for monitor stack
stack	equ	$

	end
