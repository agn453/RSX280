;**********************************************************************;
;                                                                      ;
;   This file is part of FCSLIB, a file I/O library for the RSX180 OS. ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This library is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU Library General Public        ;
;   License as published by the Free Software Foundation; either       ;
;   version 2 of the License, or (at your option) any later version.   ;
;                                                                      ;
;   This library is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU Library General Public License for more details.               ;
;                                                                      ;
;   You should have received a copy of the GNU Library General Public  ;
;   License along with this program; if not, write to the Free         ;
;   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. ;
;                                                                      ;
;**********************************************************************;

;  Close file

	.Z80

	include	SYSFN.INC
	include	QIO.INC
	include	FCSLIB.INC
	include	ERRORS.INC

	public	FCLOSE

	extrn	FWRBLK,QIOBLK,QIOSB

	cseg

FCLOSE:	ld	a,(ix+FC.MODE)
	and	07h		; channel open?
	ld	a,E.BADOP	; return error of not
	scf
	ret	z

	ld	a,(ix+FC.MODE)
	and	06h		; write mode?
	jr	z,fcls1		; branch if not

	bit	FS.BM,(ix+FC.MODE)
	jr	z,fcls1		; branch if no write pending

	call	FWRBLK		; else flush output buffer
	jr	nc,fcls1

	push	af		; in case of error, remember error code
	call	fcls1		; and close file anyway
	pop	af
	ret

fcls1:	bit	FM.DV,(ix+FC.MODE) ; device mode?
	jr	z,fcls2
	xor	a		; return success if yes, nothing to do
	ld	(ix+FC.MODE),a	; clear mode bits
	ret

fcls2:	push	hl
	ld	hl,IO.DEA	; function code
	ld	(QIOBLK+Q.FUNC),hl
	ld	a,(ix+FC.LUN)	; LUN
	ld	(QIOBLK+Q.LUN),a
	ld	a,(ix+FC.EFN)	; event flag number
	ld	(QIOBLK+Q.EFN),a
	ld	hl,0
	ld	(QIOBLK+Q.AST),hl
	ld	hl,QIOBLK
	SC	.QIO		; .QIOW
	pop	hl
	ret	c		; if queuing failed
	xor	a
	ld	(ix+FC.MODE),a	; clear mode bits
	ld	a,(QIOSB)
	or	a		; check result
	ret	z
	scf
	ret

	end
