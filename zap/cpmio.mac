;**********************************************************************;
;                                                                      ;
;   This file is part of ZAP - an hexadecimal file editor for RSX180.  ;
;   Copyright (C) 2019-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

WBOOT	equ	0
BDOS	equ	5
CPMBUF	equ	80h

.DIRIO	equ	6
.RDBUF	equ	10
.OPEN	equ	15
.CLOSE	equ	16
.READ	equ	20
.WRITE	equ	21
.DMA	equ	26
.RNDRD	equ	33
.RNDWR	equ	34
.FSIZE	equ	35

CR	equ	0Dh
LF	equ	0Ah
ESC	equ	1Bh

	public	PUTCH,PUTSTR,TTFLSH,INKEY,GETCH,DELAY
	public	INIT,EXIT,ADEC,HLDEC,UCASE,CRLF,CPHLDE
	public	MKFCB,PRFCB,OPENF,CLOSEF,READF,WRITEF
	public	TTMODE,GETCMD,RESCMD,ERRMSG

	cseg

INIT:	xor	a
	ld	(kstat),a
	ld	hl,progid
	call	PUTSTR
	ld	hl,CPMBUF
	ld	a,(hl)
	or	a		; empty command line?
	jr	z,ini1
	ld	c,a		; get character count into C
	inc	c
	ld	b,0
	ld	de,LINE+1
	ldir			; copy the command to our buffer
	ld	a,1
ini1:	ld	(CMODE),a	; remember the command mode
	ret

progid:	db	'ZAP version 1.0',CR,LF,0

EXIT:	jp	WBOOT

GETCMD:	ld	a,(CMODE)	; check mode
	or	a		; command line empty?
	jr	z,prompt	; if yes -> prompt mode
	scf
	jp	m,EXIT		; exit if single command already processed
	neg			; 1 becomes -1
	ld	(CMODE),a
	ld	hl,LINE+1
	ld	a,(hl)
	jr	p1
prompt:	call	CRLF
	ld	c,'*'		; show prompt
	call	PUTCH
	ld	de,LINE
	ld	c,.RDBUF
	call	BDOS		; get command
	call	CRLF
	ld	hl,LINE+1
	ld	a,(hl)
	or	a		; empty command line?
	jr	z,prompt	; prompt again
p1:	ld	c,a
	ld	b,0
	inc	hl
	push	hl
	add	hl,bc
	ld	(hl),0		; else add trailing zero
	pop	hl
	ret			; and return it

RESCMD:	ret			; no indirect command to kill in CP/M

ERRMSG:	call	PUTSTR
	call	CRLF
	scf
	ret

PUTCH:	push	hl
	push	de
	push	bc
	ld	e,c
	ld	c,.DIRIO
	call	BDOS
	pop	bc
	pop	de
	pop	hl
	ret

TTMODE:	ret

INKEY:	push	hl
	push	de
	push	bc
k0:	ld	e,0FFh
	ld	c,.DIRIO
	call	BDOS
	and	7Fh
	jr	z,k5
	ld	c,a
	ld	hl,kstat
	cp	3		; ^C
	jr	nz,k1
	ld	(hl),0
	jr	k4
k1:	cp	ESC
	jr	nz,k2
	ld	(hl),1
	jr	k0
k2:	ld	a,(hl)
	or	a
	jr	z,k4
	ld	a,c
	cp	'['
	jr	z,k0
	or	80h
	ld	c,a
	ld	(hl),0
k4:	ld	a,c
k5:	pop	bc
	pop	de
	pop	hl
	ret

GETCH:	call	INKEY
	or	a
	jr	z,GETCH
	ret

PUTSTR:	ld	a,(hl)
	or	a
	ret	z
	push	bc
	ld	c,a
	call	PUTCH
	pop	bc
	inc	hl
	jr	PUTSTR

TTFLSH:
	ret

DELAY:	ld	c,a
d0:	ld	b,60h		; speed
d1:	push	bc
	ld	bc,800h
d2:	dec	bc
	ld	a,b
	or	c
	jr	nz,d2
	pop	bc
	djnz	d1
	dec	c
	jr	nz,d0
	ret

ADEC:	push	de
	push	bc
	ld	d,0
	ld	b,100
	call	ad1
	ld	b,10
	call	ad1
	add	a,'0'
	ld	c,a
	call	PUTCH
	inc	d
	ld	a,d		; return length in A
	pop	bc
	pop	de
	ret

ad1:	ld	c,'0'-1
ad2:	inc	c
	sub	b
	jr	nc,ad2
	add	a,b
	push	af
	ld	a,c
	cp	'0'
	jr	nz,ad4
	inc	d
	dec	d
	jr	z,ad5
ad4:	call	PUTCH
	inc	d
ad5:	pop	af
	ret

HLDEC:	ld	(filler),a
	push	hl
	push	de
	push	bc
	ld	b,0
	ld	de,-10000
	call	sbcnt
	ld	de,-1000
	call	sbcnt
	ld	de,-100
	call	sbcnt
	ld	de,-10
	call	sbcnt
	ld	a,l
	add	a,'0'
	ld	c,a
	call	PUTCH
	inc	b
	res	7,b
	ld	a,b		; return length in A
	pop	bc
	pop	de
	pop	hl
	ret

sbcnt:	ld	c,'0'-1
sb1:	inc	c
	add	hl,de
	jr	c,sb1
	sbc	hl,de
	bit	7,b
	jr	nz,sb3
	ld	a,c
	cp	'0'
	jr	nz,sb2
	ld	a,(filler)
	or	a
	ret	z
	ld	c,a
	jr	sb3
sb2:	set	7,b
sb3:	call	PUTCH
	inc	b
	ret

UCASE:	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5Fh
	ret

CRLF:	push	bc
	ld	c,CR
	call	PUTCH
	ld	c,LF
	call	PUTCH
	pop	bc
	ret

; Returns Z if HL == DE, CY if HL > DE

CPHLDE:	ld	a,d
	cp	h
	ret	nz
	ld	a,e
	cp	l
	ret

; Make FCB

MKFCB:	ex	de,hl		; pointer to string in DE
	ld	hl,FCB
	ld	b,36
CLRFCB:	ld	(hl),0
	inc	hl
	djnz	CLRFCB
	ld	hl,FCB
	call	GETNS
	call	UCASE
	or	a
	jr	z,mf2
	sub	'A'-1
	ld	b,a
	inc	de
	ld	a,(de)
	cp	':'
	jr	z,mf3
	dec	de
mf2:	ld	(hl),0
	jr	mf4
mf3:	ld	(hl),b
	inc	de
mf4:	ld	b,8
	inc	hl
	call	GETNAM
	cp	'.'
;	STA	PFLG
	jr	nz,mf5
	inc	de
mf5:	ld	b,3
	call	GETNAM
	ex	de,hl
	ret

GETNAM:	call	GETFS
	jr	z,SFILL
	call	UCASE
	ld	(hl),a
	inc	hl
	inc	de
	djnz	GETNAM
XSKIP:	call	GETFS
	ret	z
	inc	de
	jr	XSKIP
SFILL:	ld	(hl),' '
	inc	hl
	djnz	SFILL
	ret

; Get next (non-blank) symbol
; Returns Z flag on EOL.

GETNS:	ld	a,(de)
	or	a
	ret	z
	cp	' '
	ret	nz
	inc	de
	jr	GETNS

; Get next symbol
; Returns Z on delimiter or EOL.

GETFS:	ld	a,(de)
	or	a
	ret	z
	cp	' '
	ret	z
	cp	'='
	ret	z
	cp	'.'
	ret	z
	cp	':'
	ret	z
	cp	';'
	ret	z
	cp	'<'
	ret	z
	cp	'>'
	ret	z
	cp	'/'
	ret	z
	cp	'*'
	ret	z
	cp	'?'
	ret	z
	cp	','
	ret	z
	cp	'+'
	ret	z
	cp	' '
	ret	nc
	xor	a
	ret

PRFCB:	ld	hl,FCB
	ld	a,(hl)
	inc	hl
	or	a
	jr	z,pr1
	add	a,'A'
	ld	c,a
	call	PUTCH
	ld	c,':'
	call	PUTCH
pr1:	ld	b,8
	call	pr2
	ld	c,'.'
	call	PUTCH
	ld	b,3
pr2:	ld	a,(hl)
	inc	hl
	cp	' '
	ld	c,a
	call	nz,PUTCH
	djnz	pr2
	ret

; Open file, returns file size in 512-byte blocks in HL.

OPENF:	push	de
	push	bc
	ld	c,.OPEN
	ld	de,FCB
	call	BDOS
	inc	a
	scf
	jr	z,opn1
	ld	de,FCB
	ld	c,.FSIZE
	call	BDOS
	ld	hl,(FCB+33)	; get number of 128-byte records
	ld	de,3
	add	hl,de		; round
	sra	h
	rr	l
	sra	h
	rr	l		; HL now has file size in 512-byte blocks
	or	a
opn1:	pop	bc
	pop	de
	ret

CLOSEF:	push	hl
	push	de
	push	bc
	ld	de,FCB
	ld	c,.CLOSE
	call	BDOS
	inc	a
	scf
	jr	z,cls1
	or	a
cls1:	pop	bc
	pop	de
	pop	hl
	ret

SETDMA:	push	hl
	push	de
	push	bc
	ld	c,.DMA
	call	BDOS
	pop	bc
	pop	de
	pop	hl
	ret

; Read 512-byte block, return actual number of bytes read in HL.
; Called with HL = block number, DE = buffer address.

READF:	push	de
	push	bc
	xor	a
	add	hl,hl
	rla
	add	hl,hl		; convert to CP/M record number
	rla
	ld	(FCB+33),hl	; set record number r0, r1
	ld	(FCB+35),a	; r2
	push	de
	call	SETDMA
	ld	de,FCB
	ld	c,.RNDRD
	call	BDOS		; seek to record
	pop	de
	ld	hl,0
	or	a		; test for read error
	scf
	jr	nz,rd2
	ld	b,4		; 1 block = 4 CP/M records
rd1:	call	SETDMA
	push	hl
	push	de
	push	bc
	ld	de,FCB
	ld	c,.READ
	call	BDOS		; read record
	pop	bc
	pop	de
	pop	hl
	or	a
	jr	nz,rd2		; end of file
	push	bc
	ld	bc,80h
	add	hl,bc
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	bc
	djnz	rd1
	or	a
rd2:	pop	bc
	pop	de
	ret

; Write (possibly partial) 512-byte block.
; Called with HL = block number, DE = buffer address, BC = bytes to write.

WRITEF:	push	de
	push	bc
	xor	a
	add	hl,hl
	rla
	add	hl,hl		; convert to CP/M record number
	rla
	ld	(FCB+33),hl	; set record number r0, r1
	ld	(FCB+35),a	; r2
	push	bc
	push	de
	call	SETDMA
	ld	de,FCB
	ld	c,.RNDWR
	call	BDOS		; seek to record
	pop	de
	pop	hl		; bytes to write now in HL
	or	a		; test for write error
	scf
	jr	nz,wr2
	ld	b,4		; 1 block = 4 CP/M records
wr1:	call	SETDMA
	push	hl
	push	de
	push	bc
	ld	de,FCB
	ld	c,.WRITE
	call	BDOS		; write record
	pop	bc
	pop	de
	pop	hl
	or	a
	scf
	jr	nz,wr2
	push	bc
	ld	bc,80h
	sbc	hl,bc
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	bc
	ld	a,h
	or	l
	jr	z,wr2
	djnz	wr1
	or	a
wr2:	pop	bc
	pop	de
	ret

	dseg

kstat:	ds	1
filler:	ds	1

CMODE:	ds	1

LINE:	db	128,0
LNBUF:	ds	128

FCB:	ds	36

	end
