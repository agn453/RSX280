;**********************************************************************;
;                                                                      ;
;   This file is part of VMR, an utility to configure the RSX180       ;
;   system image. Copyright (C) 1985-2020, Hector Peraza.              ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   VMR - Partition handling routines                                  ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	SYSFN.INC
	include	TCB.INC
	include	PCB.INC
	include	ERRORS.INC
	include	VMR.INC

	public	FNDPAR,NEWPAR,NEWSUB,REMPAR,MFREE

	extrn	$PLIST,KALLOC,KFREE,PCBBUF,SUBBUF,SUBADR,PCBADR,CPHLDE
	extrn	SGETB,SGETW,SGETM,SPUTM,LDHLHL,LDDEHL,LDBCHL,STHLDE
	extrn	STHLBC

;-----------------------------------------------------------------------

	cseg

; Find main partition by name.
;
; Input:
;   BC = pointer to partition name
; Returns:
;   HL = PCB address
;   DE = prev pointer

FNDPAR:	ld	hl,($PLIST)
fp1:	call	LDDEHL
	ld	a,d
	or	e
	scf
	ld	a,E.PNF		; main partition not found
	ret	z
	push	hl		; push prev ptr
	push	de		; push PCB address
	push	bc
	ld	hl,P.NAME
	add	hl,de
	ld	d,6
fp2:	ld	e,0
	call	SGETB
	ld	e,a
	ld	a,(bc)
	sub	e
	jr	nz,fp3
	inc	hl
	inc	bc
	dec	d
	jr	nz,fp2
fp3:	pop	bc
	pop	hl		; pop PCB address into HL
	pop	de		; pop prev ptr into DE
	jr	nz,fp1
	dec	de
	dec	de
	ret			; found

; Create main partition.
;
; Input:
;   BC = partition base
;   DE = partition size
;   HL = pointer to partition name
;   A  = wildcard mask
; Returns:
;   IX = address of new PCB *in local memory* after being inserted
;        into system partition list
;   CY set on error an error code in A.
;
; Note: does not check for duplicate names.

NEWPAR:	ld	iy,PWILDC
	ld	(iy),a		; store wildcard mask
	bit	0,a		; wilcard base?
	jr	z,np1		; branch if not
	ld	bc,16		; else default to 16 (skips kernel partition)
np1:	ld	(BASE),bc	; store base
	bit	1,a		; wildcard size?
	jr	z,np2		; branch if not
	ld	de,4096		; else default to max
np2:	ld	(SIZE),de	; store size
	ld	(PNAME),hl	; store pointer to name

	ld	hl,($PLIST)	; scan main partition list
np3:	ld	(PRVLNK),hl	; remember address of 'prev' link
	call	LDDEHL		; get pointer to next PCB in list
	ld	(NXTPCB),de	; save address of next PCB
	ld	a,d
	or	e		; end of list?
	jp	z,np10		; exit loop if yes, create new partition @end

	ld	hl,P.BASE
	add	hl,de
	call	pgetw		; get base of this PCB
	ld	(PBASE),bc
	ld	hl,P.SIZE
	add	hl,de
	call	pgetw		; and get size
	ld	(PSIZE),bc

	bit	0,(iy)		; wildcard base?
	jr	z,np6		; branch if not

	; wildcard base, check for gap

	ld	hl,(PBASE)
	ld	de,(BASE)
	call	CPHLDE		; pbase > base?
	jr	nc,np5		; branch if not

	; gap found

	bit	1,(iy)		; wildcard size?
	jr	z,np4		; branch if not

	; wildcard size, make the partition as large as the gap

	ld	hl,(PBASE)
	ld	(SIZE),hl	; size = pbase (base will be subtracted below)
	jr	np10		; exit loop

np4:	; size specified

	ld	hl,(PBASE)
	ld	de,(BASE)
	or	a
	sbc	hl,de		; gap size = pbase - base
	ex	de,hl
	ld	hl,(SIZE)
	call	CPHLDE
	jr	nc,np10		; exit loop if >= size (fits in gap)

np5:	ld	hl,(PBASE)
	ld	de,(PSIZE)
	add	hl,de
	ld	(BASE),hl	; new base = pbase + psize
	ld	a,h
	cp	10h
	ccf
	ld	a,E.BADOP
	ret	c		; error if overflow
	jr	np9		; loop to process next PCB

np6:	; base specified

	ld	hl,(PBASE)
	ld	de,(BASE)
	call	CPHLDE		; pbase > base?
	jr	nc,np8		; branch if not

	bit	1,(iy)		; wildcard size?
	jr	z,np7		; branch if not

	; wildcard size, make the partition as large as the gap

	ld	(SIZE),hl	; size = pbase (base will be subtracted below)
	jr	np10		; exit loop

np7:	; size specified

	ld	hl,(PBASE)
	ld	de,(BASE)
	or	a
	sbc	hl,de		; pbase - base
	ex	de,hl
	ld	hl,(SIZE)
	call	CPHLDE
	jr	nc,np10		; exit loop if >= size (fits in gap)

	ld	a,E.BADOP	; else return error
	scf
	ret

np8:	ld	de,(PSIZE)
	add	hl,de		; pbase + psize
	ld	de,(BASE)
	call	CPHLDE
	jr	z,np9
	ccf
	ld	a,E.BADOP
	ret	c		; error if > base

np9:	ld	hl,(NXTPCB)
	jp	np3		; loop

np10:	bit	1,(iy)		; wilcard size?
	jr	z,np11		; skip if yes

	ld	hl,(SIZE)
	ld	de,(BASE)
	or	a
	sbc	hl,de		; size -= base
	ld	(SIZE),hl

np11:	ld	bc,PCBSZ
	call	KALLOC		; allocate new PCB
	ret	c
	ld	(PCBADR),hl
	ld	ix,PCBBUF
	ld	(ix+P.MAIN),l
	ld	(ix+P.MAIN+1),h
	ld	hl,(BASE)
	ld	(ix+P.BASE),l	; set partition base
	ld	(ix+P.BASE+1),h
	ld	hl,(SIZE)
	ld	(ix+P.SIZE),l	; set partition size
	ld	(ix+P.SIZE+1),h
	ld	hl,(PNAME)
	ld	de,PCBBUF+P.NAME
	ld	bc,6
	ldir			; set partition name
	xor	a
	ld	(ix+P.SUB),a	; subpartition list is initially empty
	ld	(ix+P.SUB+1),a
	ld	(ix+P.WAIT),a
	ld	(ix+P.WAIT+1),a
	ld	(ix+P.ATTR),a
	ld	(ix+P.STAT),a
	ld	(ix+P.TCB),a
	ld	(ix+P.TCB+1),a
	ld	hl,(NXTPCB)
	ld	(ix+P.LNK),l	; set address of next PCB
	ld	(ix+P.LNK+1),h
	ld	de,(PCBADR)	; address of allocated pool block
	push	de
	ld	hl,PCBBUF
	ld	bc,PCBSZ
	ld	a,0
	call	SPUTM		; store PCB in system image
	pop	de
	ld	hl,(PRVLNK)
	call	STHLDE		; set link on prev PCB
	xor	a
	ret

pgetw:	push	de
	ld	e,0
	call	SGETW
	pop	de
	ret

; Remove main partition.
;
; Input:
;   BC = pointer to partition name

REMPAR:	call	FNDPAR		; find partition by name
	ret	c
	call	LDBCHL		; get next pointer into BC
	ex	de,hl
	call	STHLBC		; unlink PCB
	ex	de,hl
	ld	de,PCBSZ
	call	KFREE		; free PCB
	xor	a
	ret

; Allocate subpartition
; Input:
;   PCBBUF = copy of main partition PCB in local memory
;   PCBADR = main PCB address in system image
;   DE = num pages
; Returns:
;   IX = subpartition PCB *in local memory*, CY on error (no space)

NEWSUB:	call	FNDGAP		; find gap, sets PRVLNK, PBASE
	ret	c
	ld	bc,PCBSZ
	push	de
	call	KALLOC		; allocate new PCB
	pop	de
	ret	c		; not enough pool
	ld	(SUBADR),hl
	ld	ix,SUBBUF	; IX = new PCB in local memory
	push	ix
	ld	bc,P.NAME
	add	ix,bc
	ld	b,6
ma1:	ld	(ix),' '	; clear name field
	inc	ix
	djnz	ma1
	pop	ix
	set	PA.SUB,(ix+P.ATTR)
	set	PS.BSY,(ix+P.STAT)
	ld	hl,(PBASE)
	ld	(ix+P.BASE),l	; set base
	ld	(ix+P.BASE+1),h
	ld	(ix+P.SIZE),e	; set size
	ld	(ix+P.SIZE+1),d
	ld	hl,(PCBADR)
	ld	(ix+P.MAIN),l	; set pointer to main PCB
	ld	(ix+P.MAIN+1),h
	ld	hl,(NXTPCB)
	ld	(ix+P.LNK),l	; link PCB, keep subpartition list
	ld	(ix+P.LNK+1),h	;  sorted by address
	ld	bc,(SUBADR)
	ld	hl,(PRVLNK)	; update P.SUB if prev is main,
	call	STHLBC		;  or P.LNK if prev is sub
	ld	hl,SUBBUF
	ld	de,(SUBADR)
	ld	bc,PCBSZ
	ld	a,0
	call	SPUTM		; store sub PCB in system imake
	xor	a		; return success and PCB in IX
	ret

; Find free gap within partition.
;
; Input:
;   PCBADR = address of main PCB in system image
;   PCBBUF = copy of the main PCB in local memory
;   DE = size. 
; Returns:
;   NXTPCB = next PCB
;   PRVLNK = addr of 'next' link to update
;   PBASE  = base of gap
; Loads main PCB into PCBBUF. Preserves DE (size).

FNDGAP:	ld	iy,PCBBUF
	bit	PA.SYS,(iy+P.ATTR)
	ld	a,E.NOMEM	; TODO: E.UPAR
	scf
	ret	z		; return error if not system-controlled

	; system-controlled partition

	ld	hl,(PCBADR)
	ld	bc,P.SUB
	add	hl,bc
	ld	(PRVLNK),hl	; save address of field to update

	ld	l,(iy+P.BASE)
	ld	h,(iy+P.BASE+1)
	ld	(PBASE),hl	; remember base

	ld	l,(iy+P.SUB)
	ld	h,(iy+P.SUB+1)
	ld	(NXTPCB),hl

	ld	a,h
	or	l
	jr	z,fg3		; branch if no subpartitions

	ld	bc,P.LNK

fg1:	; loop over subpartitions

	push	hl
	push	de
	push	bc
	ld	de,SUBBUF
	ld	bc,PCBSZ
	ld	a,0
	call	SGETM		; load sub PCB
	pop	bc
	pop	de
	pop	hl
	ld	ix,SUBBUF

	push	hl
	push	bc
	ld	l,(ix+P.BASE)	; get subpartition base
	ld	h,(ix+P.BASE+1)
	ld	bc,(PBASE)
	or	a
	sbc	hl,bc		; compute size of preceding gap
	ex	de,hl
	call	CPHLDE		; gap big enough?
	ex	de,hl
	pop	bc
	pop	hl
	ret	nc		; return if yes

	add	hl,bc
	ld	(PRVLNK),hl	; save address of field to update

	ld	a,(ix+P.BASE)
	add	a,(ix+P.SIZE)
	ld	l,a
	ld	a,(ix+P.BASE+1)
	adc	a,(ix+P.SIZE+1)
	ld	h,a
	ld	(PBASE),hl	; new base is after this segment

	ld	l,(ix+P.LNK)	; get pointer to next subpartition in list
	ld	h,(ix+P.LNK+1)
	ld	(NXTPCB),hl
	ld	a,h
	or	l
	jr	nz,fg1		; loop

	; end of subpartition list

	ld	a,(ix+P.BASE)
	add	a,(ix+P.SIZE)
	ld	l,a
	ld	a,(ix+P.BASE+1)
	adc	a,(ix+P.SIZE+1)
	ld	h,a
	ld	bc,(PBASE)
	or	a
	sbc	hl,bc		; get size of last gap
	jr	fg4

fg3:	; no subpartitions yet

	ld	l,(iy+P.SIZE)	; gap size is main partition size
	ld	h,(iy+P.SIZE+1)
fg4:	ex	de,hl
	call	CPHLDE		; big enough?
	ex	de,hl
	ret	nc		; return if yes
	ld	a,E.NOMEM
	ret			; else return error (note CY set)

;-----------------------------------------------------------------------

; Free task memory.
;
; Input:
;   IX = pointer to valid subpartition PCB in system image space.

MFREE:	push	ix
	pop	hl
	ld	de,P.MAIN
	add	hl,de
	call	LDHLHL		; get pointer to main partition into HL
	ld	a,h
	or	l
	scf
	ret	z		; should not happen
	call	UNLPCB		; unlink PCB
	ret	c		; should not happen
	push	ix
	pop	hl
	ld	de,PCBSZ
	call	KFREE		; free subpartition
	xor	a
	ret

; Unlink PCB
;
; Input:
;   IX = address of subpartition PCB
;   HL = address of main PCB (both is system image space).

UNLPCB:	push	ix
	pop	de		; DE = sub PCB

	ld	bc,P.SUB
mf1:	add	hl,bc
	ld	(PRVLNK),hl	; save address of field to update
	call	LDHLHL		; get pointer to next sub PCB in list
	ld	a,h
	or	l
	scf
	ret	z		; should not happen

	ld	bc,P.LNK
	call	CPHLDE		; same sub PCB?
	jr	nz,mf1		; loop if not

	ld	hl,P.LNK
	add	hl,de
	call	LDDEHL		; get pointer to next sub PCB into DE
	ld	hl,(PRVLNK)
	call	STHLDE		; unlink
	xor	a
	ret

;-----------------------------------------------------------------------

	dseg

PWILDC:	ds	1
PNAME:	ds	2
BASE:	ds	2
SIZE:	ds	2
PBASE:	ds	2
PSIZE:	ds	2

PRVLNK:	ds	2
NXTPCB:	ds	2

	end
