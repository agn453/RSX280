;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	NAME	('CONNECT')
	TITLE	'RSX180 Task Connect, Exit and Emit Status'

;----------------------------------------------------------------------;
;                                                                      ;
;	Task Connect, Exit and Emit Status routines.                   ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	ERRORS.INC
	include	TCB.INC
	include	PCB.INC
	include	AST.INC
	include	TKN.INC

	cseg

	public	NEWOCB		; allocate and init new OCB
	public	$CONN		; connect to task
	public	LNKOCB		; link OCB to offspring task
	public	EMITST,EMTST	; emit status
	public	EXIT		; exit task with status
	public	DISCON		; disconnect from all tasks

	extrn	$CTCB,$ALLOC,$FREE,$UPUTW,QAST,$UCBDN
	extrn	SETFLG,CLRFLG,TKILL,$RLIST,$WLIST

;-----------------------------------------------------------------------

; Connect to task.

; Input:
;   HL = valid TCB address of offspring task
;   E  = flag number to set when offspring task emits status.
;   BC = address of Exit Status Block (ESB) in parent's address space.

$CONN:	push	hl
	pop	ix		; IX = offspring TCB
	bit	TA.CLI,(ix+T.ATTR)
	ld	a,E.BADOP	; error if trying to connect to a CLI
	scf
	ret	nz
	bit	TS.ACT,(ix+T.ST)
	ld	a,E.TNAC	; error if offspring task is not active
	scf
	ret	z
	call	NEWOCB		; create new OCB
	ret	c

	; continue below

; here with:
;   HL = offspring task TCB address
;   IX = OCB

LNKOCB:	ld	de,T.OCBL
	add	hl,de
con0:	ld	e,(hl)		; search for end of OCB list
	inc	hl
	ld	d,(hl)
	dec	hl
	ld	a,d
	or	e
	ex	de,hl
	jr	nz,con0
	ex	de,hl
	push	ix
	pop	de
	ld	(hl),e		; set OCB in offspring task
	inc	hl
	ld	(hl),d
	ret

; Allocate and initialize a new OCB.

; Input:
;   HL = offspring task TCB address
;   E  = flag number to set when offspring task emits status.
;   BC = address of Exit Status Block (ESB) in parent's address space.
; Returns:
;   IX = OCB
; Preserves HL

NEWOCB:	push	hl		; push offspring TCB
	push	de		; flag
	push	bc		; parent ESB
	ld	bc,OCBSZ
	call	$ALLOC		; allocate OCB
	jr	c,nocb
	push	hl
	pop	ix		; IX = OCB
	ld	hl,($CTCB)
	ld	(ix),0		; clear next pointer
	ld	(ix+1),0
	ld	(ix+O.PTCB),l	; set parent's TCB in OCB
	ld	(ix+O.PTCB+1),h
	pop	bc
	ld	(ix+O.ESB),c	; set ESB address
	ld	(ix+O.ESB+1),b
	pop	de
	ld	(ix+O.EFN),e	; set event flag number in OCB
	ld	c,l
	ld	b,h
	call	CLRFLG		; clear event flag, preserves IX
	pop	hl		; pop offspring TCB
	ret	nc		; return on success
	push	af
	push	ix
	pop	hl
	ld	de,OCBSZ
	call	$FREE		; else free the OCB
	pop	af		; and return the error code
	ret

nocb:	pop	bc
	pop	de
	pop	hl
	ret

;-----------------------------------------------------------------------

; Exit task with status.

; Input:
;   HL = status.
; This routine is called by a task via SYSENT.

; TODO:
; - cleanup should be done in TKILL, so OCBs get freed also after abort
;   (update: OCBs are now reconnected to TKTN).
; - Abort should also send a status back to parent (E.ABRT) (update: see
;   above)
; - Parent should keep an offspring count to break connections in case
;   parent finishes before offspring

EXIT:	call	EMITST		; emit status
	ld	bc,($CTCB)	;  and exit
	ld	e,TK.NONE	; normal exit
	jp	TKILL		; TKILL never returns for the current
				;  task ($CTCB)

;-----------------------------------------------------------------------

; Emit status and break connections.

; Input:
;   HL = status.

; This routine is called by a task via SYSENT, or indirectly via EXIT.

EMITST:	ld	c,l		; get status into BC
	ld	b,h
	ld	hl,($CTCB)	; get TCB of (maybe exiting) task into HL
EMTST:	ld	de,T.OCBL
	add	hl,de		; offset into OCB list
	push	hl
	ld	e,(hl)		; get address of OCB into DE
	inc	hl
	ld	d,(hl)
em1:	ld	a,d		; any (more) tasks connected?
	or	e
	jr	z,em2		; return if not
	call	SENDST		; else send status
	ex	de,hl		; traverse the list
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	push	de
	ld	de,OCBSZ
	push	bc
	call	$FREE		; free the OCB
	pop	bc
	pop	de
	jr	em1		; and loop for next OCB
em2:	pop	hl
	ld	(hl),a		; A is already zero!
	inc	hl
	ld	(hl),a		; clear T.OCBL
	ret

; Send status to parent task.

; Input:
;   BC = status
;   DE = OCB address
; Preserves BC and DE.

; If the parent task is in memory, the status is immediately stored at
; the specified ESB address. Otherwise (e.g. if checkpointed), an special
; AST block is unconditionally queued to the parent task, and the status
; stored when that AST is dispatched.

SENDST:	push	bc		; save status
	ld	hl,O.PTCB
	add	hl,de
	ld	c,(hl)		; get TCB address of parent task
	inc	hl		;  into BC
	ld	b,(hl)
	ld	hl,O.EFN
	add	hl,de
	push	de
	ld	e,(hl)		; get flag number into reg E
	push	bc
	call	SETFLG		; set event flag and wakeup parent
	pop	iy		; parent TCB address now in IY
	pop	de
	ld	hl,O.ESB
	add	hl,de
	ld	a,(hl)		; get ESB address into HL
	inc	hl
	ld	h,(hl)
	ld	l,a
	bit	T2.OUT,(iy+T.ST+1) ; parent task out of memory?
	jr	nz,st1		; branch if yes

	pop	bc
	push	de
	push	hl
	ld	e,(iy+T.PCB)	; else retrieve PCB address
	ld	d,(iy+T.PCB+1)
	ld	hl,P.BASE
	add	hl,de
	ld	e,(hl)		; get task bank number into reg E
	pop	hl
	di
	call	$UPUTW		; and store status
	ei
	pop	de
	jr	st2

st1:	push	de
	push	hl
	ld	bc,ACBSZ+4
	call	$ALLOC		; allocate special AST block
	push	hl
	pop	ix		; get address of block into IX
	pop	hl
	pop	de
	pop	bc
	ret	c		; on error, return
	ld	(ix+A.SIZ),4
	ld	(ix+A.TYP),AST.ST OR 80h
	ld	(ix+A.DAT),l	; set ESB address
	ld	(ix+A.DAT+1),h
	ld	(ix+A.DAT+2),c	; set status
	ld	(ix+A.DAT+3),b
	push	ix
	pop	hl
	ld	a,(iy+T.ASTL)	; link AST block in front of list to ensure
	ld	(ix+A.LNK),a	;  that it gets dispatched even if the task
	ld	a,(iy+T.ASTL+1)	;   has disabled AST recognition.
	ld	(ix+A.LNK+1),a
	ld	(iy+T.ASTL),l
	ld	(iy+T.ASTL+1),h

st2:	push	bc
	push	de
	ld	hl,-15
	add	hl,sp		; allocate space for AST arguments on stack
	ld	sp,hl
	push	hl
	ld	(hl),c		; store status
	inc	hl
	ld	(hl),b
	inc	hl
	ld	(hl),0		; set cause = 0 (for now)
	inc	hl
	ex	de,hl
	ld	bc,($CTCB)
	push	bc
	ld	hl,T.TI
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl
	call	$UCBDN
	ld	(hl),e		; set terminal device
	inc	hl
	ld	(hl),d
	inc	hl
	ld	(hl),c
	inc	hl
	ex	de,hl
	pop	bc
	ld	hl,T.NAME
	add	hl,bc
	push	bc
	ld	bc,6
	ldir			; set task name (note: IX = A.DAT+6...)
	pop	bc
	ld	hl,T.ATTR
	add	hl,bc
	ld	a,(hl)
	ld	(de),a		; store T.ATTR
	inc	de
	ld	hl,T.ST
	add	hl,bc
	ld	a,(hl)
	ld	(de),a		; store T.ST
	inc	hl
	inc	de
	ld	a,(hl)
	ld	(de),a
	push	iy
	pop	ix		; IX = TCB addr of task to send AST to
	pop	hl		; pointer to args
	ld	de,0		; use specified AST routine address
	ld	c,15		; arg length
	ld	a,AST.ST	; AST type
	call	QAST		; queue AST block to parent task
	ld	hl,15
	add	hl,sp
	ld	sp,hl		; cleanup stack
	pop	de
	pop	bc
	ret

;-----------------------------------------------------------------------

; Disconnect from all tasks. Called when a task exits, during the
; cleanup stage.

; Input:
;   BC = task's TCB
; Preserves BC.

DISCON:	ld	iy,$RLIST
	call	disc1
	ld	iy,$WLIST
disc1:	ld	l,(iy)		; get link value into HL
	ld	h,(iy+1)
	ld	a,h		; end of list?
	or	l
	ret	z		; return if yes
	push	hl
	call	CLNOCB		; cleanup OCB list
	pop	iy
	ld	de,T.ACTL
	add	iy,de		; add link offset
	jr	disc1		; and loop to process next task

; Remove any caller's (parent) OCBs from this task

; TODO: check also MCR queue?

CLNOCB:	ld	de,T.OCBL
	add	hl,de
	push	hl
cln1:	pop	ix		; get head of OCB list into IX
	ld	e,(ix)
	ld	d,(ix+1)	; get pointer to OCB into DE
	ld	a,d
	or	e		; end of list?
	ret	z		; return if yes
	ld	hl,O.PTCB	; offset to TCB in OCB
	add	hl,de
	ld	a,(hl)		; check TCB field
	cp	c		; match?
	jr	nz,cln2
	inc	hl
	ld	a,(hl)
	cp	b
	jr	z,cln3		; unlink and free the OCB if yes
cln2:	push	de
	jr	cln1		; else loop to process next OCB in list

cln3:	ld	a,(de)		; get link field
	ld	(ix),a		; unlink OCB
	inc	de
	ld	a,(de)
	ld	(ix+1),a
	dec	de
	ex	de,hl		; HL = dequeued OCB
	ld	de,OCBSZ	; DE = OCB size
	push	ix
	push	bc
	call	$FREE		; free OCB
	pop	bc
  IF 0
	ld	hl,T.OCBC
	add	hl,bc
	dec	(hl)		; decrement task's outstanding OCB count
  ENDIF
	jr	cln1		; loop to process next OCB

	end
